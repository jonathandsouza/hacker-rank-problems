var CoreMod = {};

(function (exports) {

    'use strict';

    exports.Vertex = function (id) {

        this.id = id;

    };

    exports.Edge = function (e, v, distance) {

        this.from = new exports.Vertex(e);

        this.to = new exports.Vertex(v);

        this.distance = distance;

    };

    exports.bellmanFord = function (vertexes, edges, source) {

        var distances = {};

        var parents = {};

        var c;

        if (source) {

            for (var i = 0; i < vertexes.length; i += 1) {

                distances[vertexes[i].id] = Infinity;

                parents[vertexes[i].id] = null;

            }

            distances[source.id] = 0;

            for (i = 0; i < vertexes.length - 1; i += 1) {

                for (var j = 0; j < edges.length; j += 1) {

                    c = edges[j];

                    if (distances[c.from.id] + c.distance < distances[c.to.id]) {

                        distances[c.to.id] = distances[c.from.id] + c.distance;

                        parents[c.to.id] = c.from.id;

                    }

                }

            }

            for (i = 0; i < edges.length; i += 1) {

                c = edges[i];

                if (distances[c.from.id] + c.distance < distances[c.to.id]) {

                    return undefined;

                }

            }

        }

        return {parents: parents, distances: distances};

    };

})(CoreMod);


function Algorithm() {

    var BellmanFord = CoreMod;

    var Edge = BellmanFord.Edge;

    var Vertex = BellmanFord.Vertex;

    var bellmanFord = BellmanFord.bellmanFord;

    var edges = [];

    var vertexes = [

        new Vertex(1),

        new Vertex(2),

        new Vertex(3),

        new Vertex(4),

        new Vertex(5),

        new Vertex(6),

    ];


    edges.push(new Edge(1, 2, 6));
    edges.push(new Edge(2, 1, 6));

    edges.push(new Edge(1, 3, 6));
    edges.push(new Edge(3, 1, 6));

    edges.push(new Edge(2, 4, 6));
    edges.push(new Edge(4, 2, 6));

    edges.push(new Edge(2, 5, 6));
    edges.push(new Edge(5, 2, 6));

    edges.push(new Edge(3, 5, 6));
    edges.push(new Edge(5, 3, 6));

    edges.push(new Edge(5, 6, 6));
    edges.push(new Edge(6, 5, 6));


    // {

    //   parents:   { '0': null, '1':  0, '2': 1, '3':  4, '4': 1 },

    //   distances: { '0': 0,    '1': -1, '2': 2, '3': -2, '4': 1 }

    // }


    var pathInfo = bellmanFord(vertexes,edges, new Vertex(2));

    console.log(pathInfo);

}


Algorithm();
